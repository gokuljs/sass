.row {
    max-width: $grid-width;
    // max-width = what max-width does if ur view port size is less than that of the size of the max-width size then 
    // it occupies the complete space 
    background-color: #eee;
    margin: 0 auto; // trick to align anything in center
    margin-bottom: $gutter-vertical;
    &:not(:last-child) {
        // we dont want the last child to have margin bottom so wat not does is its does not apply the value to the last child
        margin-bottom: $gutter-vertical;
    }
    @include clearfix;
    // attribute selector 
    //^ this tells us that class starting with col-
    // "*" this tells us that class should contain col- 
    [class^="col-"] {
        background-color: orangered;
        float: left;
        &:not(:last-child) {
            margin-right: $gutter-horizontal;
        }
    }
    .col-1-0f-2 {
        //calc() allows us to do mathematical calculations 
        width: calc((100% - #{$gutter-horizontal}) / 2); // # function is for working sass inside css 
        // inside calc is there all are case sensitive proper identation is required 
    }
    .col-1-0f-3 {
        width: calc((100% - 2*#{$gutter-horizontal}) / 3); // # function is for working sass inside css 
        // inside calc is there all are case sensitive proper identation is required 
        // @include clearfix;
    }
    .col-2-0f-3 {
        width: calc(2*((100% - 2*#{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    }
    .col-1-0f-4 {
        width: calc((100% - 3*#{$gutter-horizontal}) / 4);
        //  formual for making grid 
        // (100%- (numberofgutter * width value))/4
    }
    .col-2-of-4 {
        width: calc(2*((100% - 3*#{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    }
    .col-3-0f-4 {
        width: calc(3*((100% - 3*#{$gutter-horizontal}) / 4) + 2*#{$gutter-horizontal});
    }
}